#!/site/perl/perl-5.10.1-1/bin/perl
use lib '/site/marchex/lib/perl';
use lib '/site/github-api-tools/lib';
use warnings;
use strict;
use feature ':5.10';

########################################
# modify_repos requires Marchex::Client::GitHub and Marchex::OpenURL,
# which are found in github-api-tools.  just install that project.
#
# this program does mass modifications to GitHub repos,
# in particular Chef Cookbook repos.  it accepts a JSON file as
# input, defining the changes to make.  see example JSON file at
# bottom of this program.
#
# * finds all repos in a specific org matching regexes (or explicit names)
# * creates a temp dir
# * alphabetically loops over the repos:
#   * checks repo out to temp dir
#   * creates new branch with specified name
#   * makes specified changes (delete file, create file, modify file)
#   * adds changes to branch
#   * if no changes, go to next repo
#   * commit changes
#   * print diff of changes
#   * optionally ask user whether to push changes
#   * bump metadata version
#   * push changes
#   * create pull request (optionally open PR in browser window)
#   * optionally wait for PR status to go "green" before continuing to next repo


use Data::Dumper; $Data::Dumper::Sortkeys=1;
use Date::Format;
use JSON::XS 'decode_json';
use Marchex::Client::GitHub;
use Marchex::OpenURL 'open_url';
use File::Temp;

our($gh, $config) = init();
our $found_repos = find_repos();
modify_repos();
print "Done.\n";


########################################

sub do_die {
    my(@args) = @_;
    print STDERR @args, "\n";
    exit -1;
}

sub do_system {
    my($cmd, $nofail) = @_;
    print "* $cmd\n";
    my $ret = system($cmd);
    if ($nofail && $ret) {
        print STDERR "(ignore any above errors)";
        return;
    }
    do_die "system '$cmd' failed: $ret : $?" if $ret != 0;
    if ($? == -1) {
        do_die "failed to execute: $!";
    }
    elsif ($? & 127) {
        do_die sprintf "child died with signal %d, %s coredump",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
}

sub do_prompt {
    my($prompt) = @_;
    local $| = 1;
    print $prompt;
    chomp(my $ans = <>);
    return $ans;
}

########################################

sub modify_repos {
    for my $repo (@$found_repos) {
        checkout_repo($repo);
        make_changes($repo) or next;  # no changes!
        bump_metadata($repo);
        finish_changes($repo);
    }
}

sub wait_for_pr {
    my($repo, $pr) = @_;

    print "Waiting for pull request $pr->{html_url} ...\n";

    # this makes it the "combined status" API
    (my $status_url = $pr->{statuses_url}) =~ s|/statuses/|/status/|;
    my $iter = 0;
    my $master = 0;
    while (1) {
        unless ($master) {
            $pr = $gh->{api}->command(GET => $pr->{url});
            if ($pr->{state} eq 'closed') {
                warn "Pull request has been closed\n";
                last;
            }
        }

        my($status) = $gh->{api}->command(GET => $status_url);
        if (!$status) {
            warn "Could not get status for commit, skipping\n";
            last;
        }
        elsif ($status->{state} eq 'pending') {
            print "Commit status: pending ...\n" if $iter =~ /0$/;
            $iter++;
        }
        elsif ($status->{state} eq 'failure') {
            warn "Commit status: failure\n";
            last;
        }
        elsif ($status->{state} eq 'success') {
            print "Commit status: success\n";

            if ($master) {
                print "Done.\n";
                last;
            }
            else {
                print "Merging branch to master ...\n";
                my($merge) = $gh->{api}->command(PUT => $pr->{url} . '/merge');
                if (!$merge->{merged}) {
                    warn "Could not merge pull request: $merge->{message}\n";
                    last;
                }

                print "Deleting branch ...\n";
                (my $git_refs = $repo->{git_refs_url}) =~ s|\{/sha\}$||;
                $gh->{api}->command(DELETE => $git_refs . "/heads/$config->{branch_name}");

                $master = 1;
                $iter = 0;
                print "Waiting for master status: $merge->{sha}\n";
                $status_url = $pr->{base}{repo}{url} . '/commits/' . $merge->{sha} . '/status';
            }
        }

        sleep 6;
    }

}

sub finish_changes {
    my($repo) = @_;

    do_system "git commit -m \Q$config->{message}\E";
    do_system "git --no-pager log --stat -p -1";

    if (! $gh->{test_only}) {
        my $push_and_pr = 1;
        if ($gh->{ask_first}) {
            my $ans = do_prompt("Push and make pull request for $config->{org}/$repo->{name}? [Yn] ");
            if ($ans =~ /^n/i) {
                $push_and_pr = 0;
            }
        }

        if ($push_and_pr) {
            my $prs = $gh->{api}->command(GET => "/repos/$config->{org}/$repo->{name}/pulls", {
                head => "$config->{org}:$config->{branch_name}"
            });
            if (@$prs) {
                if ($gh->{ask_first}) {
                    my $ans = do_prompt("Found existing pull request for this branch ($prs->[0]{html_url}).\nStill push and make pull request? [Yn] ");
                    if ($ans =~ /^n/i) {
                        $push_and_pr = 0;
                    }
                }
                else {
                    $push_and_pr = 0;
                }
            }

            if ($push_and_pr) {
                do_system "git push origin $config->{branch_name}";

                my $pr = $gh->{api}->command(POST => "/repos/$config->{org}/$repo->{name}/pulls", {
                    title => $config->{pr_message},
                    head  => $config->{branch_name},
                    base  => 'master'
                });
                if ($pr) {
                    if (-e 'Jenkinsfile') {
                        open_url($pr->{html_url}) if $gh->{open_url};
                        wait_for_pr($repo, $pr) if $gh->{wait_for_pr};
                    }
                    else {
                        warn "No Jenkinsfile; not waiting for PR to go green\n";
                    }
                }
                else {
                    warn "Could not create a pull request; please go to $repo->{html_url} to continue\n";
                }
            }
        }
    }

    print "\n\n";
}

sub checkout_repo {
    my($repo) = @_;
    chdir $config->{dir};
    $repo->{_local_dir} = "$config->{dir}/$repo->{name}";
    print "\n====>  $repo->{_local_dir}\n";

    do_system "git clone $repo->{ssh_url}";
    chdir $repo->{_local_dir};
    do_system "git checkout -b $config->{branch_name}";
}

sub find_repos {
    print "Finding repos ...\n";
    my @found_repos;
    my $repos = $gh->{api}->command(GET => "/orgs/$config->{org}/repos");
    REPO: for my $repo (@$repos) {
        for my $name (@{ $config->{repos} }) {
            if ($repo->{name} eq $name) {
                push @found_repos, $repo;
                next REPO;
            }
        }

        for my $match (@{ $config->{repo_matches} }) {
            if ($repo->{name} =~ $match) {
                push @found_repos, $repo;
                next REPO;
            }
        }
    }

    if (!@found_repos) {
        die "No repositories found to modify.\n";
    }

    printf "Found %d repos ...\n", scalar(@found_repos);

    return [ sort { $a->{name} cmp $b->{name} } @found_repos ];
}

########################################

sub bump_metadata {
    my($repo) = @_;

    change_modify($repo, {
        file            => 'metadata.rb',
        action          => 'modify',
        modifications   => [
            {
                search      => '(?m-xis:^(version\s+.*\d+\.\d+\.)(\d+)(.*)$)',
                replace     => '$1 . ($2 + 1) . $3',
                modifiers   => 'e'
            }
        ]
    });
}

sub change_delete {
    my($repo, $change) = @_;

    if ($change->{file} && $change->{directory}) {
        die "Cannot specify both 'file' ($change->{file}) and 'directory' ($change->{directory}) for a deletion\n";
    }

    unless (($change->{file} && -f $change->{file}) || ($change->{directory} && -d $change->{directory})) {
        my $change_file = $change->{file} || $change->{directory};
        warn "No '$change_file' found, skipping\n";
        return;
    }

    if ($change->{directory} && -d $change->{directory}) {
        do_system "git rm -r $change->{directory}";
    }
    else {
        do_system "git rm $change->{file}";
    }
}

sub change_create {
    my($repo, $change) = @_;

    open my $fh, '>', $change->{file};
    print $fh $change->{content};
    close $fh;

    do_system "git add $change->{file}";
}

sub change_modify {
    my($repo, $change) = @_;

    unless (-f $change->{file}) {
        warn "No '$change->{file}' file found, skipping\n";
        return;
    }

    open my $fh, '<', $change->{file} or die "Cannot open '$change->{file}' for reading";
    my $content = join '', <$fh>;
    close $fh;

    for my $modification (@{ $change->{modifications} }) {
        die "Need 'search' regex and 'replace' string for each modification"
            unless defined $modification->{search} && defined $modification->{replace};

        my $search  = qr/$modification->{search}/;
        $modification->{modifiers} //= '';

        my $eval = "\$content =~ s/$search/$modification->{replace}/$modification->{modifiers}";
        if ($modification->{unless}) {
            $eval .= " unless \$content =~ /$modification->{unless}/";
        }
        #print $eval, "\n";
        eval $eval;
    }

    open $fh, '>', $change->{file} or die "Cannot open '$change->{file}' for writing";
    print $fh $content;
    close $fh;

    do_system "git add $change->{file}";
}

sub change_patch {
    my($repo, $change) = @_;

    do_system "git apply -v --stat --apply --reject $change->{patchfile} || true";
    do_system "git add -u";
}

sub make_changes {
    my($repo) = @_;
    for my $change (@{ $config->{changes} }) {
        if ($change->{action} eq 'delete') {
            change_delete($repo, $change);
        }
        elsif ($change->{action} eq 'create') {
            change_create($repo, $change);
        }
        elsif ($change->{action} eq 'modify') {
            change_modify($repo, $change);
        }
        elsif ($change->{action} eq 'patch') {
            change_patch($repo, $change);
        }
    }

    chomp(my $changed = `git status --porcelain`);
    if ($changed) {
        return 1;
    }
    elsif ($gh->{force_change}) {
        print "No changes in $repo->{name}; bumping version anyway due to --force_change\n";
        return 1;
    }
    else {
        print "No changes in $repo->{name}; skipping\n";
        return 0;
    }
}

########################################

sub init {
    my $gh = Marchex::Client::GitHub->init(
        'o|open_url'            => 'open_url',
        'A|ask_first'           => 'ask_first',
        'W|wait_for_pr'         => 'wait_for_pr',
        'K|no_kitchen'          => 'no_kitchen',
        'n|test_only'           => 'test_only',
        'm|commit_message=s'    => 'commit_message',
        'f|force_change'        => 'force_change',
        'b|branch_name=s'       => 'branch_name'
    );

    my $config = {};
    my $input = join '', <>;
    my $data = decode_json($input); # if no config, and using -f, then just call `echo '{}' | modify_repos ...`

    if (!$data->{changes} && !$gh->{force_change}) {
        die "No 'changes' provided in JSON";
    }


    $config->{branch_name}  = $gh->{branch_name}    //= $data->{branch_name} //= "$ENV{USER}-modify-repos-" . time2str('%Y%m%dT%H%M%S', time);
    $config->{message}      = $gh->{commit_message} //= $data->{commit_message} // "modify_repos $config->{branch_name}";
    $config->{pr_message}   = $gh->{no_kitchen} ? $config->{message} . ' no_kitchen' : $config->{message};
    $config->{org}          = $data->{org}          //= 'marchex-chef';
    $config->{repos}        = $data->{repos}        //= [];
    $config->{repo_matches} = $data->{repo_matches} //= ['^(bind|multipath)$', '^(mchx|hostclass|role|foo|pop)_'];
    $config->{changes}      = $data->{changes}      //= [];

    for my $match (@{ $config->{repo_matches} }) {
        $match = qr{$match};
    }

    $config->{dir} = File::Temp->newdir();
    $gh->{org} = $config->{org};

    return($gh, $config);
}

__END__

Example JSON file:

{
    "branch_name": "fix-some-stuff",
    "changes": [
        {
            "file": "foo.md",
            "action": "create",
            "content": "# foo!\\nthis is a test.\\n"
        },
        {
            "file": "foodcritic_rules.rb",
            "action": "delete"
        },
        {
            "file": "Jenkinsfile",
            "action": "modify",
            "modifications": [
                {
                    "search": "\\n[\\t\\s]*currentBuild.result = \"SUCCESS\"\\s*\\n",
                    "replace": "\\n"
                }
            ]
        },
        {
            "action": "patch",
            "patchfile": "/Users/cnandor/src/marchex-chef/cookbooks/mchx_auditd/0001.patch"
        }
    ]
}
